========== tables ==========
// --- ENUMS ---
enum En{
	ALPHA=0,
	BETA=729,
	GAMMA=730
};
// --- STRUCTS ---
struct Str{
	const char*key;
	struct Str*next;
};
// --- GLOBAL TYPEDEFS ---
typedef struct _file_s FILE;
typedef enum En ent;
typedef struct Str*str_ptr;
// --- FUNCTION DECLARATIONS ---
void argreverttest(int,char**);
_Bool empty(struct Str**);
int fib(int);
void fibtest();
const char*front(struct Str**);
struct Str*get_str();
int main(int,char**);
void*memset(void*,int,int);
void pointerarithmeticstest();
void pop_front(struct Str**);
int printf(const char*,...);
void push_front(struct Str**,const char*);
int scanf(const char*,...);
int sprintf(char*,const char*,...);
int sscanf(const char*,const char*,...);
void stringtest();
_Bool test();
void test_enum();
enum En test_enum_internal(enum En);
// --- GLOBAL VARIABLES ---
struct Str array[1000];
int array_end;
enum En my_var;
struct _file_s*myout;
struct Str*root;
_Bool status;
// --- FUNCTION DEFINITIONS ---
void argreverttest(int argc,char**argv){
	int i;
	const char*z;
}
_Bool empty(struct Str**rootp){
}
int fib(int x){
	int s;
}
void fibtest(){
	int n;
	int s;
}
const char*front(struct Str**rootp){
}
struct Str*get_str(){
	struct Str*p;
}
int main(int argc,char**argv){
}
void pointerarithmeticstest(){
	char arr[27];
	char ch;
	char*e;
	char*p;
}
void pop_front(struct Str**rootp){
}
void push_front(struct Str**rootp,const char*key){
	struct Str*p;
}
void stringtest(){
	char arr[100];
	int i;
	char t[40];
}
_Bool test(){
}
void test_enum(){
	enum En x;
}
enum En test_enum_internal(enum En arg){
	enum En tmp;
}
========== starting main() ==========
This is test1.c main()
... argreverttest ...
sizeof(struct Str) = 16
argv[0] is "test2typedef.c"
popped "test2typedef.c"
... test_enum ...
x=0, my_var=729
... fibtest ...
fib(20) returned 6765
... stringtest ...
sprintf: 1 text
sscanf: 1 text
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
... pointerarithmeticstest ...
ABCDEFGHIJKLMNOPQRSTUVWXYZ

========== main() returned 0 ==========
========== cecko4 done ==========
